#ifndef SEIENCODE_H
#define SEIENCODE_H

#include <QWidget>

#include <QByteArray>
#ifndef FLT_MAX
#define FLT_MAX -99999
#endif


namespace Ui {
class sEiEncode;
}

class sEiEncode : public QWidget
{
    Q_OBJECT

public:
    explicit sEiEncode(QWidget *parent = nullptr);
    ~sEiEncode();

    QByteArray FIEN_setting(bool flag);    //FIEN控制命令生成，灯丝开关
    QByteArray FIEN_returnValue();         //发送FIEN命令后模块的返回值
    QByteArray EIST_setting(float value);  //EIST控制命令生成
    QByteArray EIST_returnValue();         //发送EIST命令后模块的返回值
    QByteArray FIGN_setting(float value);  //FIGN控制命令生成
    QByteArray FIGN_returnValue();         //发送FIGN命令后模块的返回值
    QByteArray EMIC_getting();             //EMIC读取命令生成
    QByteArray FILC_getting();             //FILC读取命令生成
    float EMIC_FILC_decode(QByteArray rt); //EMIC及FILC电流获取

private:
    Ui::sEiEncode *ui;
};



/*  CRC16标准校验码生成
 * 参考博客：https://www.cnblogs.com/94cool/p/3559585.html
 * 计算结果验证网址：http://www.ip33.com/crc.html，参数模型选择CRC16/MODBUS
 * 标准CRC生成多项式如下表：
   名称          生成多项式              简记式*        标准引用
   CRC-4         x4+x+1                  3           ITU G.704
   CRC-8         x8+x5+x4+1              0x31
   CRC-8         x8+x2+x1+1              0x07
   CRC-8         x8+x6+x4+x3+x2+x1       0x5E
   CRC-12        x12+x11+x3+x+1          80F
   CRC-16        x16+x15+x2+1            8005        IBM SDLC
   CRC16-CCITT   x16+x12+x5+1            1021        ISO HDLC, ITU X.25, V.34/V.41/V.42, PPP-FCS
   CRC-32        x32+x26+x23+...+x2+x+1  04C11DB7    ZIP, RAR, IEEE 802 LAN/FDDI, IEEE 1394, PPP-FCS
   CRC-32c       x32+x28+x27+...+x8+x6+1 1EDC6F41    SCTP

 * CRC-16校验码计算方法：
    常用查表法和计算法。计算方法一般都是：
    （1）、预置1个16位的寄存器为十六进制FFFF（即全为1），称此寄存器为CRC寄存器；
    （2）、把第一个8位二进制数据（既通讯信息帧的第一个字节）与16位的CRC寄存器的低
           8位相异或，把结果放于CRC寄存器，高八位数据不变；
    （3）、把CRC寄存器的内容右移一位（朝低位）用0填补最高位，并检查右移后的移出位；
    （4）、如果移出位为0：重复第3步（再次右移一位）；如果移出位为1，CRC寄存器与多
        项式A001（1010 0000 0000 0001）进行异或；
    （5）、重复步骤3和4，直到右移8次，这样整个8位数据全部进行了处理；
    （6）、重复步骤2到步骤5，进行通讯信息帧下一个字节的处理；
    （7）、将该通讯信息帧所有字节按上述步骤计算完成后，得到的16位CRC寄存器的高、低
           字节进行交换；
    （8）、最后得到的CRC寄存器内容即为：CRC码。
    以上计算步骤中的多项式A001是8005按位颠倒后的结果。

     * 查表法计算校验值
     * 查表法是将移位异或的计算结果做成了一个表，就是将0~256放入
     * 一个长度为16位的寄存器中的低八位，高八位填充0，然后将该寄存器与
     * 多项式0xA001按照上述3、4步骤，直到八位全部移出，最后寄存器中的
     * 值就是表格中的数据，高八位、低八位分别单独一个表。
 */

static const uchar aucCRCHi[] = {
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40
};

static const uchar aucCRCLo[] = {
    0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7,
    0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E,
    0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9,
    0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC,
    0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
    0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32,
    0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D,
    0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38,
    0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF,
    0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
    0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1,
    0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4,
    0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB,
    0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA,
    0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
    0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0,
    0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97,
    0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E,
    0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89,
    0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83,
    0x41, 0x81, 0x80, 0x40
};

class sCRC16{

public:

    // *pucFrame 为待校验数据首地址，usLen为待校验数据长度。返回值为校验结果。
    /* 例如输入的pucFrame为16进制的数据{0x03, 0xAA}，usLen为2，计算结果应为0x3F81，
     * 但本函数返回的是USHORT为0x3F81对应的十进制的值16257。悉知。
     */
    static ushort usMBCRC16(uchar *pucFrame, ushort usLen, uchar& rCRCHi, uchar& rCHCLo)
    {
        uchar ucCRCHi = 0xFF;
        uchar ucCRCLo = 0xFF;
        int iIndex;
        while(usLen--)
        {
            iIndex = ucCRCLo ^ *( pucFrame++ );
            ucCRCLo = (uchar)(ucCRCHi ^ aucCRCHi[iIndex]);
            ucCRCHi = aucCRCLo[iIndex];
        }
        rCRCHi = ucCRCHi;
        rCHCLo = ucCRCLo;
        return (ushort)(ucCRCHi << 8 | ucCRCLo);        //这是转换为10进制后的值
    }
};



#endif // SEIENCODE_H
